samples = ["A", "B", "C"]
pathCommons = "/commons/Themas/Thema11/Dataprocessing/WC02/data/"

rule all: #  snakemake --dag (no name needed for all) | dot -Tsvg > images/chainOfrules.svg
    input: 
        "results/calls/all2.vcf"
    message:
        "Trigger entire chain of rules"


rule bwa_map:
    input:
        pathCommons + "genome.fa",
        pathCommons + "samples/{samples}.fastq"
        #"resources/genome.fa",
        #"resources/samples/{samples}.fastq"
    message:
        "mapping of samples"
    output:
        "results/mapped_reads/{samples}.bam"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"

rule samtools_sort:
    input:
        "mapped_reads/{samples}.bam"
    message:
        "sort mapped read alignments in bam files"
    output:
        "results/sorted_reads/{samples}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.samples} "
        "-O bam {input} > {output}"

rule samtools_index:
    input:
        "sorted_reads/{samples}.bam"
    message:
        "index the sorted read alignments for random access"
    output:
        "results/sorted_reads/{samples}.bam.bai"
    shell:
        "samtools index {input}"

rule bcftools_call:
    input:
        #fa="resources/genome.fa",
        fa= pathCommons + "genome.fa",
        bam=expand("sorted_reads/{sample}.bam", sample=samples),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=samples)
    message:
        "Manipulate variant calls"
    output:
        "results/calls/all2.vcf"
    shell:
        "bcftools mpileup -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"


# https://snakemake.readthedocs.io/en/stable/tutorial/tutorial.html
# https://r-wedema.gitbook.io/snakemake/introduction/theory-of-snakemake